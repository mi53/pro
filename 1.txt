注意事项:
1. 工程搭建。先实现VC平台，项目SDV测试后再验证其他平台。
   建议使用SVN进行项目集成。各模块责任人合入代码后须工程可编译。
2. 各模块功能可参照EA图中类图对应模块，部分复杂功能可参照EA图中分析视图对应功能。
3. 可能出错的函数，返回值统一表示为错误码，ALM函数调用应使用专用日志宏进行错误校验（便于问题定位时能得到函数调用栈）。
4. 各模块对外函数放置在独立的头文件中。
5. 对以模块功能依赖，为保证程序的随时可编译优先使用简单方式实现，再未实现前先使用空函数并返回特定的错误码。若无返回值打印错误日志。
6. 模块责任人每周给出责任模块开发计划。若需要测试协助，也在此处给出计划。
7. 新开发模块，模块责任人应在周二前给出对外接口。接口有变动须邮件通知全组。
8. 函数命名采用xxx_+模块名+操作。


开发计划: 各阶段计划完成后再启动下一阶段计划。

S1：最小功能包。 （约9周/人）
1. OS及产品回调。(2天/人）（先实现内存操作 -- 先仅支持动态内存、日志回调、获取当前时间、获取ESN、）
2. 日志。(1天/人）（便于问题定位，出错时最好能得到函数调用栈）
3. Store存储工具 --- 表格使用此工具存储数据行。(3天/人）（实现链表，S3存储优化实现其他数据结构）
4. 表格定义。(4天/人) 尽早给出表格及列定义，License文件管理、产品管理、状态管理均依赖此数据。具体实现可以在表格存储对外接口给出后实现。
5. 表格存储器。(2周/人）（不支持主键、外键、列排序、事务、视图、....)
6. 状态管理。(2周/人: 可再细分）（使用虚拟License实现状态统一管理）（产品状态、产品BBOM状态、文件状态、文件控制项状态）
7. 默认License文件管理。(1周/人）（依据产品配置实现虚拟的默认License文件）
8. 产品管理。(1周/人）
9. 普通License文件管理（先实现XML文件及几个主要功能）。(1-2周/人）

模块依赖: 
1
2. 1
3. 1/2
4. 1/2/5
5. 1/2/3
6. 1/2/4/5
7. 1/2/4/5/6
8. 1/2/4/5/6/8
9. 1/2/4/5/6.

建议按上述顺序完成（可以同步开发），模块给出对外接口后，模块依赖不影响模块开发（影响测试）。

S2：功能实现。 
功能有可能没列全，S1有些模块也可能只完成部分核心功能，待S1后再给出S2详细计划。S2之后可以进行各平台SDV测试。
1. OS完整功能。
2. 锁的简单应用（仅针对对外接口及定时任务加锁）。
3. 加解密。
4. stick license。
5. emergency license.
6. dat license.
7. 定时刷新状态。
8. 告警。 (专项设计）
9. 对外接口设计及实现。（可以分模块多人完成）
10. 持久化。
11. 失效。

s3: 扩展功能及优化。
1. 静态内存。
2. 锁。（细化锁目标，锁池...）
3. 异步。 （日志、告警、定时任务等异步执行，包括: 异步等待、异步无等待。使用线程池自动管理任务: 任务优先级、延时优化）
4. 存储优化。（提高查询效率，扩展事务便于回滚，尽量向数据库优化方向靠拢）
5. OS及其他回调优化。（提高程序运行及问题定位效率）

疑点及评审:
1. 虚拟License状态管理专项设计。
2. ESN（产品ESN是否需要支持分号、逗号）。
3. 告警专项。（从状态变更及原因中抽取告警）
4. 异步专项设计。 （日志、告警、定时任务等异步执行，线程池管理、任务优先级、延时优化）
5. 锁专项。（细化锁目标，锁池...）
6. OS专项。（提高程序运行及问题定位效率）
7. 表格优化专项。
8. License文件安装、验证次要错误专项设计。
9. 是否保留最小值、最大值。若保留值比较的次要错误是否需要得到还是仅仅使用日志即可。

10. 默认安装与激活的差异。
建议无差异处理。

11. 安全专项。（部分数据加密处理.....）

评审: 本处给出专项方案整体设计，具体实现承载于类图及对应的场景中。
1. 虚拟License状态管理专项设计。
   紧急、默认、stick均抽象为对应的License文件，统一使用License文件管理License状态及授权。
   License文件区分级别及优先级，同一级别License文件在一个产品上只能同时激活一个。
   产品授权及License授权值取高级别有效的License文件值。
   同一级别不同优先级License文件，只有高或相同优先级文件能成功替换低优先级文件。
   具体参照EA图中，通用License/紧急/stick/默认。
   建议不再提供Inherent功能（stick可以满足inherent需求）。
   
2. ESN（产品ESN是否需要支持分号、逗号）。
   现阶段产品ESN中若存在多个ESN可以使用分号或逗号隔开。
   逗号隔开产品ESN必须全部存在于license文件中。
   分号隔开仅需要一个分号段存在于License文件中即可。
   
   建议: 产品回调ESN仅保留逗号，并且与原先的分号意义一致，保持与License文件ESN风格一致。
   License文件中多ESN往往被认可为允许多台设备，而原有产品逗号ESN机制破坏了这种认可。
   如果产品需要同时绑定多个设备，产品应该将这些设备抽象一个独立的ESN。
   另外ESN规则太复杂使得保存产品ESN到表格中比较麻烦。当然也可以不保存每次从回调中获取。若保存要么自动、要么能够手动刷新ESN。
   
   另外，回调ESN是否需要区分产品？？
   如果不区分产品ESN无须保存到表格中。
   
8. License文件安装、验证次要错误专项设计。  
   由于次要错误覆盖面太广：有前后文件比较、ESN、版本、失效等等。要收集这些信息对项目的结构性冲击比较严重。
   次要错误主要目的在于收集前后文件比较、状态原因、以及一些限定（如最小值等）方面的信息。
   对以前后文件比较，建议由文件比较函数实现。这样也便于扩展比较内容。
   状态原因收集，这个可以随着激活函数返回，也可以单独查询。

9. 是否保留最小值、最大值。
   默认License/紧急License/stick license授权值建议单独配置，不强行绑定最大值(有的产品对stick有过这个需求）。
   对以License文件未超期，部分控制项超期，建议超期的控制项不在使用最小值而降低到使用默认License文件中的值。对以有产品
   要求有最小值需求的这种特殊场景，新的License文件可以支持BBOM多个截止日期，建议产品使用这种方式。
   
   另外授权值最小值、最大值的范围限定是否由我们处理。个人倾向不在提供这种界定。有些产品其实也没有使用最小值和最大值。
   如果保留，授权值不满足这个范围界定的信息是以参数的形式返回，还是只需记录日志便可。
